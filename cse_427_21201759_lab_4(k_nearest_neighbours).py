# -*- coding: utf-8 -*-
"""CSE_427_21201759_Lab_4(K Nearest Neighbours).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U2FYv5ash2Vr_OsXEbPeUm9A_dZZanvU
"""

# import necessary libraries
import numpy as np
from collections import Counter
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score
import matplotlib.pyplot as plt

"""# Implementing KNN Classifier from Scratch"""

class KNN:
    def __init__(self, k):
        self.k = k

    def euclidean_distance(self, point1, point2):
        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))

    def fit(self, X_train, y_train):
        self.X_train = np.array(X_train)
        self.y_train = np.array(y_train)

    def predict(self, X_test):
        predictions = [self.predict_label(x) for x in X_test]
        return predictions

    def predict_label(self, x):
        distances = [self.euclidean_distance(x, train_point) for train_point in self.X_train]
        k_indices = np.argsort(distances)[:self.k]
        k_labels = [self.y_train[i] for i in k_indices]
        most_common = Counter(k_labels).most_common(1)[0][0]
        return most_common

# Load the Iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=41)

# Initialize KNN classifier with the value of n
knn = KNN(3)

# Fit the model
knn.fit(X_train, y_train)

# Predict on the test set
y_pred = knn.predict(X_test)

# Calculate accuracy (write down the equation to calculate accuracy, and uncomment the print function)
accuracy = np.sum(y_pred == y_test) / len(y_test)

print(f"Accuracy of KNN from scratch: {accuracy * 100:.2f}%")